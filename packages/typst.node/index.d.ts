/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface NodeAddFontPaths {
  /** Add additional directories to search for fonts */
  fontPaths: Array<string>;
}
export interface NodeAddFontBlobs {
  /** Add additional memory fonts */
  fontBlobs: Array<Array<number>>;
}
export interface CompileArgs {
  /** Add additional directories to search for fonts */
  fontArgs: Array<NodeAddFontPaths | NodeAddFontBlobs>;
  /** Path to typst workspace. */
  workspace: string;
  /** Entry file. */
  entry: string;
  /** Add a string key-value pair visible through `sys.inputs` */
  inputs: Record<string, string>;
}
export interface CompileBy {
  mainFileContent?: string;
  mainFilePath?: string;
}
export type JsBoxedCompiler = BoxedCompiler;
export class BoxedCompiler {}
export class NodeTypstDocument {
  get title(): string | null;
}
/**
 * `constructor` option for `struct` requires all fields to be public,
 * otherwise tag impl fn as constructor
 * #[napi(constructor)]
 */
export class NodeCompiler {
  /** Get default compile arguments */
  static defaultCompileArgs(): CompileArgs;
  /** This is the constructor */
  static create(args: CompileArgs): NodeCompiler;
  compile(compileBy: CompileBy): NodeTypstDocument;
  vector(compileBy: CompileBy): Buffer;
  pdf(compileBy: CompileBy): Buffer;
  svg(compileBy: CompileBy): string;
  intoBoxed(): BoxedCompiler;
}
export class DynLayoutCompiler {
  static fromBoxed(b: BoxedCompiler): DynLayoutCompiler;
  vector(compileBy: CompileBy): Buffer;
}
