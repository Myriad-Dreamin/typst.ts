import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';

import * as fs from 'fs';
import * as path from 'path';

const IS_COMMON_JS = process.argv[2] === 'commonjs';
const IS_PRODUCTION = process.argv[2] === 'production' || process.argv[3] === 'production';
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository https://github.com/Myriad-Dreamin/typst.ts/blob/main/packages/typst.ts
*/
`;

let wasmPlugin = {
  name: 'wasm',
  setup(build) {
    // Resolve ".wasm" files to a path with a namespace
    build.onResolve({ filter: /\.wasm$/ }, args => {
      if (args.resolveDir === '') {
        return; // Ignore unresolvable paths
      }
      return {
        path: path.isAbsolute(args.path) ? args.path : path.join(args.resolveDir, args.path),
        namespace: 'wasm-binary',
      };
    });
    // Virtual modules in the "wasm-binary" namespace contain the
    // actual bytes of the WebAssembly file. This uses esbuild's
    // built-in "binary" loader instead of manually embedding the
    // binary data inside JavaScript code ourselves.
    build.onLoad({ filter: /.*/, namespace: 'wasm-binary' }, async args => ({
      contents: await fs.promises.readFile(args.path),
      loader: 'binary',
    }));
  },
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  outdir: IS_COMMON_JS ? 'dist/cjs' : 'dist/esm',
  outExtension: {
    '.js': '.bundle.js',
  },
  entryPoints: ['src/main.mts', 'src/contrib/global-renderer.mts', 'src/contrib/sync-worker.mts'],
  bundle: true,
  format: IS_COMMON_JS ? 'cjs' : 'esm',
  tsconfig: 'tsconfig.lib.json',
  platform: 'browser',
  external: [...builtins],
  target: 'es2020',
  logLevel: 'info',
  sourcemap: IS_PRODUCTION ? false : 'inline',
  treeShaking: true,
  plugins: [wasmPlugin],
});

if (IS_PRODUCTION) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
